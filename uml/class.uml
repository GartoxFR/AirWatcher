@startuml

' class Date{
'     -Ann√©e: int
'     -Mois: int
'     -Jour: int
'     -Heure: int
'     -Minute: int
'     -Seconde: int
' }

class Sensor {
    - sensorID: string
    - latitude: double
    - longitude: double
    - measurements: set<Measurements*>  
    - user: User*

    + Sensor()

    + GetSensorId(): string&
    + GetLatitude(): double
    + GetLongitude(): double
    + GetMeasurements(): set<Measurements*>&
    + GetMeasurementsInPeriod(): vector<Measurements*>
    + GetUser(): User*
}

class Measurement {
    - timestamp: time_t
    - values: MeasurementValues

    + Measurement(time_t, MeasurementValues)
    + GetTimestamp(): time_t
    + GetValues(): MeasurementValues

}

class MeasurementValues {
    - o3: double
    - so2: double
    - no2: double
    - pm10: double

    + MeasurementValues(double, double, double, double)

    + ComputeQualityIndex(): int

    + GetO3(): double

    + GetSO2(): double
    + GetNO2(): double
    + GetPM10(): double

    + ComputeSimilarity(MeasurementValues);

    + operator+(MeasurementValues): MeasurementValues
    + operator+=(MeasurementValues)

    + operator-(MeasurementValues): MeasurementValues
    + operator-=(MeasurementValues)

    + operator/(MeasurementValues): MeasurementValues
    + operator/=(MeasurementValues)

    + operator*(MeasurementValues): MeasurementValues
    + operator*=(MeasurementValues)
}

class Attribute {
  -AttributeID: string
  -Unit: string
  -Description: string
  +Attribute()
}

class Provider {
  - providerId: string
  - cleaners: vector<Cleaner*>

  + Provider()

  + GetId(): string
  + GetCleaners(): vector<Cleaner*>
}

class Cleaner {
    - cleanerId: string
    - latitude: double
    - longitude: double
    - start: time_t
    - end: time_t
    - provider: Provider*

    + Cleaner()
    + GetId(): string
    + GetLatitude(): double
    + GetLongitude: double
    + GetStart(): time_t
    + GetEnd(): time_t
    + GetProvider(): Provider*
}

class User {
    - userId: string
    - sensors: vector<Sensor*>
    - points: int

    + User(userID: string)
    + GetPoints(): int
    + AddPoints(int points)
}

class ProcessingLayer {
    + CalculQualiteAirZone(double latitude, double longitude, double radius) : int
    + CalculSimilarite(string SensorID, time_t start, time_t end) : vector<Sensor*>
    + CalculImpactNettoyeur(string CleanerID) : double
    + CalculFiabilite(string SensorID, double rayon) : multimap<double, Value*>
    + CalculFiabiliteCapteur(string SensorID, double rayon) : double
}

class Dataset {
    - sensors: map<string,Sensor>
    - measurements: vector<Measurement>
    - attributes: map<string, Attribute>
    - providers: map<string, Provider>
    - cleaners: map<string, Cleaner>
    - users: map<string, User>

    + GetSensorById(string sensorId): Sensor*
    + GetUserById(string userId): User*
    + GetProviderById(string providerId): Provider*
    + GetCleanerById(string cleanerId): Cleaner*

    + GetSensors(): map<string, Sensor>&
    + GetSensorsInZone(double latitude, double longitude, double radius): Sensor*
    + GetCleanersInZone(double latitude, double longitude, double radius): Cleaner*

    +{static} ImportFromCSV(string directory) : Dataset
}

' Dataset <-- Sensor
' Dataset <-- Measurement
' Dataset <-- Attribute
' Dataset <-- Provider
' Dataset <-- Cleaner
' Dataset <-- User
@enduml
